/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.simulador1;

import static com.mycompany.simulador1.metodos.*;
import static com.mycompany.simulador1.metodos.agregarFilaH;
import static com.mycompany.simulador1.metodos.calcularHiper;
import static com.mycompany.simulador1.metodos.calcularSesgo;
import static com.mycompany.simulador1.metodos.curtosis;
import static com.mycompany.simulador1.metodos.desviacionEstandar;
import static com.mycompany.simulador1.metodos.determinarTipoCurtosis;
import static com.mycompany.simulador1.metodos.determinarTipoSesgo;
import static com.mycompany.simulador1.metodos.factorCorreccion;
import static com.mycompany.simulador1.metodos.agregarFila;
import static com.mycompany.simulador1.metodos.calcularBinomial;
//import static com.mycompany.simulador1.probabilidades.dat;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author juan
 */
public class panelProbabilidades extends javax.swing.JFrame {

    /**
     * Creates new form panelProbabilidades
     */
    public panelProbabilidades() {
        initComponents();
    }
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    static DefaultCategoryDataset dat = new DefaultCategoryDataset();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtExito = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtFracaso = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMuestra = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPoblacion = new javax.swing.JTextField();
        txtK = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPorcentajeAceptacion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMed = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        comboOpciones = new javax.swing.JComboBox<>();
        btnCalcular = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtResultado = new javax.swing.JTextField();
        txtMedia = new javax.swing.JTextField();
        txtDE = new javax.swing.JTextField();
        txtFactor = new javax.swing.JTextField();
        txtSesgo = new javax.swing.JTextField();
        txtCurtosis = new javax.swing.JTextField();
        txtTipoS = new javax.swing.JLabel();
        txtTipoC = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        modeloTabla = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        txtNumExitos = new javax.swing.JTextField();
        tipoCalculo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("p");

        jLabel2.setText("q");

        txtFracaso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFracasoActionPerformed(evt);
            }
        });

        jLabel3.setText("Muestra");

        jLabel4.setText("Población");

        txtK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKActionPerformed(evt);
            }
        });

        jLabel6.setText("% aceptación");

        jLabel7.setText("Media");

        txtMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedActionPerformed(evt);
            }
        });

        jLabel8.setText("x");

        comboOpciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "x=", "x<=", "x>=" }));

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        jLabel9.setText("Resultado:");

        jLabel10.setText("Media:");

        jLabel11.setText("D. E.:");

        jLabel12.setText("F. C.:");

        jLabel13.setText("Sesgo");

        jLabel14.setText("Curtosis:");

        txtResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResultadoActionPerformed(evt);
            }
        });

        txtMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMediaActionPerformed(evt);
            }
        });

        txtDE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDEActionPerformed(evt);
            }
        });

        txtFactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFactorActionPerformed(evt);
            }
        });

        txtSesgo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSesgoActionPerformed(evt);
            }
        });

        txtCurtosis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurtosisActionPerformed(evt);
            }
        });

        modeloTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "n", "Valor binomial", "Valor binomial acumulado", "Porcentaje", "Porcentaje Acumulado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(modeloTabla);

        jLabel15.setText("K");

        txtNumExitos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumExitosActionPerformed(evt);
            }
        });

        tipoCalculo.setText("HOLA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtExito, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFracaso, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPorcentajeAceptacion, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel7)
                                .addGap(28, 28, 28)
                                .addComponent(txtMed, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtNumExitos, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(comboOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                                .addComponent(btnCalcular))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCurtosis, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSesgo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtFactor, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDE, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtMedia, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTipoS)
                                    .addComponent(txtTipoC))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(txtK, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(493, 493, 493)))
                .addContainerGap(217, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(573, 573, 573)
                .addComponent(tipoCalculo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tipoCalculo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtExito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtFracaso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPorcentajeAceptacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtNumExitos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCalcular))
                        .addComponent(jLabel7)))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtMedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtDE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtSesgo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTipoS))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtCurtosis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTipoC))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        txtPoblacion.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFracasoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFracasoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFracasoActionPerformed

    private void txtKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKActionPerformed

    private void txtMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedActionPerformed

    private void txtResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResultadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResultadoActionPerformed

    private void txtMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMediaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMediaActionPerformed

    private void txtDEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDEActionPerformed

    private void txtFactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFactorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFactorActionPerformed

    private void txtSesgoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSesgoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSesgoActionPerformed

    private void txtCurtosisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurtosisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurtosisActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        double valorP = 0;
        double valorQ = 0;
        int textN = 0;
        int textPoblacion = 0;
        double textK = 0;
        double porcentaje = 0;
        double textMedia = 0;
        int x = 0;
        try {
            // Verificar si el campo está vacío
            if (txtMuestra.getText().trim().isEmpty()) {
            } else {
                textN = Integer.parseInt(txtMuestra.getText().trim());
            }

            if (txtExito.getText().trim().isEmpty()) {
            } else {
                valorP = Double.parseDouble(txtExito.getText().trim());
                valorQ = 1 - valorP;
            }

            if (txtFracaso.getText().trim().isEmpty()) {
                valorQ = 1 - valorP;
            } else {
                valorQ = Double.parseDouble(txtFracaso.getText().trim());
                valorP = 1 - valorQ;
            }

            if (txtPoblacion.getText().trim().isEmpty()) {
            } else {
                textPoblacion = Integer.parseInt(txtPoblacion.getText().trim());
            }
            if (txtPorcentajeAceptacion.getText().trim().isEmpty()) {
            } else {
                porcentaje = Double.parseDouble(txtPorcentajeAceptacion.getText().trim());
            }
            if (txtMed.getText().trim().isEmpty()) {
                textMedia = 0.0;
            } else {
                textMedia = Double.parseDouble(txtMed.getText().trim());
            }
            if (txtNumExitos.getText().trim().isEmpty()) {
            } else {
                x = Integer.parseInt(txtNumExitos.getText().trim());
            }

        } catch (NumberFormatException e) {
            System.out.println("EL VALOR DE N NO ES UN NÚMERO VÁLIDO");
        }

        String seleccionado = (String) comboOpciones.getSelectedItem();

        double condicionTwnty = calcularVeintePrcnt(textPoblacion);
        double fivePrcnt = calcularFivePrcnt(textPoblacion);

        //---------------------------------------------------------------------- LÓGICA DE CONDICIONALES
        if (textN >= condicionTwnty && textPoblacion != 0) {
            tipoCalculo.setText("Hipergeomética");
            ((DefaultTableModel) modeloTabla.getModel()).setRowCount(0);
            if (txtK.getText().trim().isEmpty()) {
                textK = valorP * textPoblacion; // Calculamos k
            } else {
                textK = Double.parseDouble(txtK.getText().trim());
            }

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            BigDecimal vFinal = BigDecimal.ZERO;
            BigDecimal porcentajeAcum = BigDecimal.ZERO;
            BigDecimal hiperAcum = BigDecimal.ZERO;

            txtSesgo.setText(String.valueOf(calcularSesgo(valorQ, valorP, textN)));
            txtCurtosis.setText(String.valueOf(curtosis(valorQ, valorP, textN)));

            double ses = calcularSesgo(valorQ, valorP, textN);
            txtTipoS.setText(determinarTipoSesgo(ses));

            double curt = curtosis(valorQ, valorP, textN);
            txtTipoC.setText(determinarTipoCurtosis(curt));
            double media = (textN * textK) / textPoblacion;
            txtMedia.setText(String.valueOf(media));

            txtDE.setText(String.valueOf(desviacionEstandar(textPoblacion, textN, (int) textK)));

            if (seleccionado.equals("x=")) {
                BigDecimal vHiperParaMostrar = calcularHiper(textPoblacion, textN, x, (int) textK);
                txtResultado.setText(String.valueOf(vHiperParaMostrar));
                for (int i = 0; i <= x; i++) {
                    BigDecimal vHiper = calcularHiper(textPoblacion, textN, i, (int) textK);
                    vFinal = vFinal.add(vHiper);

                    dataset.addValue(vHiper.doubleValue(), "Probabilidad", String.valueOf(i));

                    BigDecimal porcentaje1 = vHiper.multiply(BigDecimal.valueOf(100));
                    porcentajeAcum = porcentajeAcum.add(porcentaje1); // Acumulando el porcentaje
                    hiperAcum = hiperAcum.add(vHiper);
                    dataset.addValue(vHiper, "Probabilidad", String.valueOf(i));
                    agregarFilaH(i, vHiper, hiperAcum, porcentaje1, porcentajeAcum, (DefaultTableModel) modeloTabla.getModel());
                    dat.addValue(porcentajeAcum.doubleValue(), "Porcentajes", String.valueOf(i));
                    modeloTabla.setDefaultRenderer(Object.class, new ResaltadorFilas(porcentaje));
                }
            }

            if (seleccionado.equals("x<=")) {

                BigDecimal vHiperParaMostrar = calcularHiper(textPoblacion, textN, x, (int) textK);
                txtResultado.setText(String.valueOf(vHiperParaMostrar));
                for (int i = 0; i <= x; i++) {
                    BigDecimal vHiper = calcularHiper(textPoblacion, textN, i, (int) textK);
                    vFinal = vFinal.add(vHiper);
                    dataset.addValue(vHiper.doubleValue(), "Probabilidad", String.valueOf(i));
                    BigDecimal porcentaje1 = vHiper.multiply(BigDecimal.valueOf(100));
                    porcentajeAcum = porcentajeAcum.add(porcentaje1); // Acumulando el porcentaje
                    hiperAcum = hiperAcum.add(vHiper);
                    dataset.addValue(vHiper, "Probabilidad", String.valueOf(i));
                    agregarFilaH(i, vHiper, hiperAcum, porcentaje1, porcentajeAcum, (DefaultTableModel) modeloTabla.getModel());
                    dat.addValue(porcentajeAcum.doubleValue(), "Porcentajes", String.valueOf(i));
                    modeloTabla.setDefaultRenderer(Object.class, new ResaltadorFilas(porcentaje));
                }
            }

            if (seleccionado.equals("x>=")) {

                BigDecimal vHiperParaMostrar = calcularHiper(textPoblacion, textN, x, (int) textK);
                txtResultado.setText(String.valueOf(vHiperParaMostrar));
                for (int i = x; i <= textN; i++) {
                    BigDecimal vHiper = calcularHiper(textPoblacion, textN, i, (int) textK);
                    vFinal = vFinal.add(vHiper); // Ahora sí está inicializado correctamente

                    dataset.addValue(vHiper.doubleValue(), "Probabilidad", String.valueOf(i));

                    BigDecimal porcentaje1 = vHiper.multiply(BigDecimal.valueOf(100));
                    porcentajeAcum = porcentajeAcum.add(porcentaje1); // Acumulando el porcentaje
                    hiperAcum = hiperAcum.add(vHiper);
                    dataset.addValue(vHiper, "Probabilidad", String.valueOf(i));
                    agregarFilaH(i, vHiper, hiperAcum, porcentaje1, porcentajeAcum, (DefaultTableModel) modeloTabla.getModel());
                    dat.addValue(porcentajeAcum.doubleValue(), "Porcentajes", String.valueOf(i));
                    modeloTabla.setDefaultRenderer(Object.class, new ResaltadorFilas(porcentaje));
                }

                txtDE.setText(String.valueOf(desviacionEstandar(textPoblacion, textN, (int) textK)));
            }
            JFreeChart chart = ChartFactory.createBarChart("Distribución hipergeométrica", "Valor de n", "Valor hipergeométrico", dataset);
            ChartPanel chartPanel = new ChartPanel(chart);
            JFrame frame = new JFrame("Gráfica Hipergeométrica");
            frame.setSize(800, 600);
            frame.setContentPane(chartPanel);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);

            // Segundo gráfico
            JFreeChart porcentajes = ChartFactory.createBarChart("Porcentajes", "Valor de n", "Valor de porcentajes", dat);
            ChartPanel chartPanel2 = new ChartPanel(porcentajes);
            JFrame frame2 = new JFrame("Gráfica de Porcentajes");
            frame2.setSize(800, 600);
            frame2.setContentPane(chartPanel2);
            frame2.setLocation(frame.getX() + 820, frame.getY()); // Ubicar al lado de la primera ventana
            frame2.setVisible(true);
        }

        if (textN < condicionTwnty || condicionTwnty == 0) {
            tipoCalculo.setText("Binomial");
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            ((DefaultTableModel) modeloTabla.getModel()).setRowCount(0);
            txtFactor.setText("");
            txtDE.setText("");
            txtMedia.setText("");
            BigDecimal vFinal = BigDecimal.ZERO;
            BigDecimal porcentajeAcum = BigDecimal.ZERO;
            BigDecimal probAcum = BigDecimal.ZERO;
            double porcentajeAceptacion = Integer.parseInt(txtPorcentajeAceptacion.getText());

            if (x > textN) {
                JOptionPane.showMessageDialog(null, "El valor de x debe ser menor a muestra");
            } else {

                double media = textN * valorP;
                txtMedia.setText(String.valueOf(media));

                //Para población infinita
                System.out.println("textPoblacion = " + textPoblacion);
                System.out.println("fivePrcnt = " + fivePrcnt);

                if (fivePrcnt == 0.0 || textPoblacion == 0) {
                    double calc = Math.sqrt(textN * valorP * valorQ);
                    System.out.println("Es menor a 5%");
                    txtDE.setText(String.valueOf(calc));
                    txtFactor.setText("");
                }

                //Para población finita
                if (textPoblacion != 0 && textN >= fivePrcnt) {
                    double FC = factorCorreccion(textPoblacion, textN);
                    txtFactor.setText(String.valueOf(FC));
                    double calc = FC * Math.sqrt(textN * valorP * valorQ);
                    System.out.println("Es mayor a 5%");
                    txtDE.setText(String.valueOf(calc));
                }

                if (seleccionado.equals("x=")) {
                    for (int i = 0; i <= x; i++) {
                        // Obtener el valor binomial como BigDecimal
                        BigDecimal vBinomial = calcularBinomial(valorP, valorQ, textN, i);

                        // Acumular valores usando BigDecimal
                        vFinal = vFinal.add(vBinomial);

                        // Agregar al dataset
                        dataset.addValue(vBinomial.doubleValue(), "Probabilidad", String.valueOf(i));

                        // Calcular el porcentaje
                        BigDecimal porcentaje1 = vBinomial.multiply(BigDecimal.valueOf(100));
                        porcentajeAcum = porcentajeAcum.add(porcentaje1);
                        probAcum = probAcum.add(vBinomial);

                        // Llamar a la función para agregar fila con valores en BigDecimal
                        agregarFila(i, vBinomial, probAcum, porcentaje1, porcentajeAcum, (DefaultTableModel) modeloTabla.getModel());

                        // Agregar al gráfico de porcentajes
                        dat.addValue(porcentajeAcum.doubleValue(), "Porcentajes", String.valueOf(i));

                        // Configurar el resaltador de filas
                        modeloTabla.setDefaultRenderer(Object.class, new ResaltadorFilas(porcentajeAceptacion));
                    }

                    BigDecimal vFinal1 = calcularBinomial(valorP, valorQ, textN, x);
                    txtResultado.setText(vFinal1.toPlainString());

                    BigDecimal vFinalX = calcularBinomial(valorP, valorQ, textN, x);
                    BigDecimal porcentajeFinal = vFinalX.multiply(BigDecimal.valueOf(100));

                }

                if (seleccionado.equals("x<=")) {
                    vFinal = BigDecimal.ZERO; // Reiniciar la variable antes de empezar a sumar
                    porcentajeAcum = BigDecimal.ZERO;
                    probAcum = BigDecimal.ZERO;

                    for (int i = 0; i <= x; i++) {  // Iterar hasta 'x' en lugar de 'n'
                        BigDecimal vBinomial = calcularBinomial(valorP, valorQ, textN, i);
                        vFinal = vFinal.add(vBinomial);

                        dataset.addValue(vBinomial.doubleValue(), "Probabilidad", String.valueOf(i));

                        BigDecimal porcentaje1 = vBinomial.multiply(BigDecimal.valueOf(100));
                        porcentajeAcum = porcentajeAcum.add(porcentaje1);
                        probAcum = probAcum.add(vBinomial);

                        agregarFila(i, vBinomial, probAcum, porcentaje1, porcentajeAcum, (DefaultTableModel) modeloTabla.getModel());
                        dat.addValue(porcentajeAcum.doubleValue(), "Porcentajes", String.valueOf(i));

                        modeloTabla.setDefaultRenderer(Object.class, new ResaltadorFilas(porcentajeAceptacion));
                    }

                    txtResultado.setText(vFinal.toPlainString());
                }

                if (seleccionado.equals("x>=")) {
                    vFinal = BigDecimal.ZERO; // Reiniciar la variable antes de empezar a sumar

                    for (int i = x; i <= textN; i++) {  // Aquí se debe iterar desde 'x' hasta 'n'
                        BigDecimal vBinomial = calcularBinomial(valorP, valorQ, textN, i);  // Suponiendo que esta función devuelve BigDecimal
                        vFinal = vFinal.add(vBinomial);

                        dataset.addValue(vBinomial.doubleValue(), "Probabilidad", String.valueOf(i));

                        BigDecimal porcentaje1 = vBinomial.multiply(BigDecimal.valueOf(100));
                        porcentajeAcum = porcentajeAcum.add(porcentaje1);
                        probAcum = probAcum.add(vBinomial);

                        agregarFila(i, vBinomial, probAcum, porcentaje1, porcentajeAcum, (DefaultTableModel) modeloTabla.getModel());
                        dat.addValue(porcentajeAcum.doubleValue(), "Porcentajes", String.valueOf(i));

                        modeloTabla.setDefaultRenderer(Object.class, new ResaltadorFilas(porcentajeAceptacion));
                    }

                    txtResultado.setText(vFinal.toPlainString());

                }

                txtSesgo.setText(String.valueOf(calcularSesgo(valorQ, valorP, textN)));
                double ses = calcularSesgo(valorQ, valorP, textN);
                txtTipoS.setText(determinarTipoSesgo(ses));

                txtCurtosis.setText(String.valueOf(curtosis(valorQ, valorP, textN)));
                double curt = curtosis(valorQ, valorP, textN);
                txtTipoC.setText(determinarTipoCurtosis(curt));

                //Gráfico
                JFreeChart chart = ChartFactory.createBarChart("Distribución binomial", "Valor de n", "Valor binomial", dataset);
                ChartPanel chartPanel = new ChartPanel(chart);
                JFrame frame = new JFrame("Gráfica Binomial");
                frame.setSize(800, 600);
                frame.setContentPane(chartPanel);
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);

                // Segundo gráfico
                JFreeChart porcentajes = ChartFactory.createBarChart("Porcentajes", "Valor de n", "Valor de porcentajes", dat);
                ChartPanel chartPanel2 = new ChartPanel(porcentajes);
                JFrame frame2 = new JFrame("Gráfica de Porcentajes");
                frame2.setSize(800, 600);
                frame2.setContentPane(chartPanel2);
                frame2.setLocation(frame.getX() + 820, frame.getY()); // Ubicar al lado de la primera ventana
                frame2.setVisible(true);
            }
        }

        if (textMedia != 0) {
            tipoCalculo.setText("Poisson");
            txtTipoS.setText("");
            txtTipoC.setText("");
            txtCurtosis.setText("");
            txtSesgo.setText("");
            txtFactor.setText("");
            txtMedia.setText("");
            txtDE.setText("");

            txtResultado.setText(String.valueOf(calcularPoisson(x, textMedia)));
            double sesgoPoisson = 1 / Math.sqrt(textMedia);
            txtSesgo.setText(String.valueOf(sesgoPoisson));
            txtTipoS.setText(determinarTipoSesgo(sesgoPoisson));

            double curtosisPoisson = 1 / textMedia;
            txtCurtosis.setText(String.valueOf(curtosisPoisson));
            txtTipoC.setText(determinarTipoCurtosis(curtosisPoisson));

            BigDecimal valorMediaBD = new BigDecimal(textMedia);
            MathContext mc = new MathContext(50, RoundingMode.HALF_UP);
            BigDecimal dePoisson = sqrt(valorMediaBD, mc);
            txtDE.setText(String.valueOf(dePoisson));

            txtMedia.setText(String.valueOf(textMedia));
        }

    }//GEN-LAST:event_btnCalcularActionPerformed

    private void txtNumExitosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumExitosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumExitosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(panelProbabilidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(panelProbabilidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(panelProbabilidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(panelProbabilidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new panelProbabilidades().setVisible(true);
            }
        });
    }
    //Esta es una prueba

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JComboBox<String> comboOpciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable modeloTabla;
    private javax.swing.JLabel tipoCalculo;
    private javax.swing.JTextField txtCurtosis;
    private javax.swing.JTextField txtDE;
    private javax.swing.JTextField txtExito;
    private javax.swing.JTextField txtFactor;
    private javax.swing.JTextField txtFracaso;
    private javax.swing.JTextField txtK;
    private javax.swing.JTextField txtMed;
    private javax.swing.JTextField txtMedia;
    private javax.swing.JTextField txtMuestra;
    private javax.swing.JTextField txtNumExitos;
    private javax.swing.JTextField txtPoblacion;
    private javax.swing.JTextField txtPorcentajeAceptacion;
    private javax.swing.JTextField txtResultado;
    private javax.swing.JTextField txtSesgo;
    private javax.swing.JLabel txtTipoC;
    private javax.swing.JLabel txtTipoS;
    // End of variables declaration//GEN-END:variables
}
